@using System.Text.Json

@page "/"

@page "/call-js-example-8"
@implements IAsyncDisposable
@inject IJSRuntime JS

<h1>My Application</h1>

<div @ref="mapElement" style='width:900px;height:500px'></div>

<button @onclick="GetCurrentLocationAsync">Show Current Location</button>
<button @onclick="ShareLocationAsync">Share Location</button>
<button @onclick="AddStoredLocations">Add Stored Locations</button>
<button @onclick="DisplayDirections">Display Directions</button>
<button @onclick="DisplaymyDirections">Display my Directions</button>



@code
{
    private ElementReference mapElement;
    private IJSObjectReference? mapModule;
    private IJSObjectReference? mapInstance;
    private double storedLatitude1 = 6.843276; // Replace with your stored latitude value
    private double storedLongitude1 = 80.003183; // Replace with your stored longitude value
    private double storedLatitude2 = 6.4134;
    private double storedLongitude2 = 81.3346;
    private string searchedValues;




    private double storedLatitude3 ; // Replace with your stored latitude value
    private double storedLongitude3; // Replace with your stored longitude value
    private double storedLatitude4 = 6.4134;
    private double storedLongitude4 = 80.003183;

    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapModule = await JS.InvokeAsync<IJSObjectReference>("import", "./mapComponent.js");
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>("addMapToElement", mapElement);
        }
    }



    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance is not null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule is not null)
        {
            await mapModule.DisposeAsync();
        }
    }

    private async Task GetCurrentLocationAsync()
    {
        if (mapModule is not null && mapInstance is not null)
        {
            var position = await JS.InvokeAsync<GeolocationCoordinates>("getCurrentLocation");

            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance, position.Latitude, position.Longitude);

            // Set the start location for the Mapbox Directions plugin
            await mapModule.InvokeVoidAsync("setDirectionsStart", mapInstance, position.Latitude, position.Longitude);

            await AddPointAsync(position.Latitude, position.Longitude);

            await JS.InvokeVoidAsync("shareLocation");

            storedLatitude3 = position.Latitude;
            storedLongitude3 = position.Longitude;

        }
    }
    private async Task ShareLocationAsync()
    {
        await GetCurrentLocationAsync();
    }

    private async Task AddPointAsync(double latitude, double longitude)
    {
        if (mapModule is not null && mapInstance is not null)
        {
            var markerElement = await mapModule.InvokeAsync<IJSObjectReference>("addPointToMap", mapInstance, latitude, longitude);
            // Center the map on the added location
            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance, latitude, longitude);
        }
    }

    private async Task AddStoredLocations()
    {
        await mapModule.InvokeVoidAsync("addPointToMap", mapInstance, storedLatitude1, storedLongitude1);
        await mapModule.InvokeVoidAsync("addPointToMap", mapInstance, storedLatitude2, storedLongitude2);
        // Add more locations as needed
    }




    private async Task DisplayDirections()
    {
        await AddStoredLocations();
        await mapModule.InvokeVoidAsync("calculateAndDisplayDirections",mapInstance, storedLatitude1, storedLongitude1, storedLatitude2, storedLongitude2);
    }

   

    [JSInvokable]
    public void StoreSearchedValues(string valuesJson)
    {
        var values = JsonSerializer.Deserialize<Dictionary<string, double>>(valuesJson);

        if (values.ContainsKey("startLatitude") && values.ContainsKey("startLongitude") &&
            values.ContainsKey("endLatitude") && values.ContainsKey("endLongitude"))
        {
           
            storedLatitude4 = values.TryGetValue("endLatitude", out double endLatitude) ? endLatitude : 0;
            storedLongitude4=values.TryGetValue("endLongitude", out double endLongitude) ? endLongitude : 0; ;
        }
    }

    private async Task DisplaymyDirections()
    {
        await GetCurrentLocationAsync();

        await mapModule.InvokeVoidAsync("calculateAndDisplayDirections", mapInstance, storedLatitude3, storedLongitude3, storedLatitude4, storedLongitude4);
    }

}


