@using System.Text.Json
@using System.IO;


@page "/"

@page "/call-js-example-8"
@implements IAsyncDisposable
@inject IJSRuntime JS

<h1>My Application</h1>

<div @ref="mapElement" style='width:900px;height:500px'></div>

<input type="text" @bind="userId" placeholder="Enter User ID" />
<button @onclick="AddStoredLocations">Add Stored Locations</button>
<button @onclick="DisplayDirections">Display Directions</button>
<button @onclick="DisplaymyDirections">Display my Directions</button>
<button @onclick="newLocation">Submit</button>


@code
{
    private ElementReference mapElement;
    private IJSObjectReference? mapModule;
    private IJSObjectReference? mapInstance;
    private double storedLatitude1 ; // Replace with your stored latitude value
    private double storedLongitude1; // Replace with your stored longitude value
    private double storedLatitude2 ;
    private double storedLongitude2;
    private double storedLatitude9; // Replace with your stored latitude value
    private double storedLongitude9;




    private double storedLatitude3 ; 
    private double storedLongitude3;
    private double storedLatitude4 = 6.4134;
    private double storedLongitude4 = 80.003183;
    private int Id = 1;
    private string userId = "";


    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapModule = await JS.InvokeAsync<IJSObjectReference>("import", "./mapComponent.js");
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>("addMapToElement", mapElement);
        }
    }



    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance is not null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule is not null)
        {
            await mapModule.DisposeAsync();
        }
    }

    private async Task GetCurrentLocationAsync()
    {
        if (mapModule is not null && mapInstance is not null)
        {
            var position = await JS.InvokeAsync<GeolocationCoordinates>("getCurrentLocation");

            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance, position.Latitude, position.Longitude);

            // Set the start location for the Mapbox Directions plugin
            await mapModule.InvokeVoidAsync("setDirectionsStart", mapInstance, position.Latitude, position.Longitude);

            await AddPointAsync(position.Latitude, position.Longitude);

            await JS.InvokeVoidAsync("shareLocation");

            storedLatitude3 = position.Latitude;
            storedLongitude3 = position.Longitude;

        }
    }


    private async Task AddPointAsync(double latitude, double longitude)
    {
        if (mapModule is not null && mapInstance is not null)
        {
            var markerElement = await mapModule.InvokeAsync<IJSObjectReference>("addPointToMap", mapInstance, latitude, longitude);
            // Center the map on the added location
            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance, latitude, longitude);
        }
    }

    private async Task AddStoredLocations()
    {
        await mapModule.InvokeVoidAsync("addPointToMap", mapInstance, storedLatitude1, storedLongitude1);
        await mapModule.InvokeVoidAsync("addPointToMap", mapInstance, storedLatitude2, storedLongitude2);
        // Add more locations as needed
    }




    private async Task DisplayDirections()
    {
        await AddStoredLocations();
        await mapModule.InvokeVoidAsync("calculateAndDisplayDirections",mapInstance, storedLatitude1, storedLongitude1, storedLatitude2, storedLongitude2);
    }




    private async Task WriteToFileAsync(string text)
    {
        string filePath = "C:/Users/Chamindu/Source/Repos/Applicatio/MauiApp3/values.txt";
        await File.WriteAllTextAsync(filePath, text);
    }



    private async Task AppendToFileAsync(string text)
    {
        string filePath = "C:/Users/Chamindu/Source/Repos/Applicatio/MauiApp3/values.txt";
        await File.AppendAllTextAsync(filePath, text + Environment.NewLine);
    }

    private async Task DisplaymyDirections()
    {
        Id = Id + 1;
        await GetCurrentLocationAsync();

        await mapModule.InvokeVoidAsync("calculateAndDisplayDirections", mapInstance, storedLatitude3, storedLongitude3, storedLatitude4, storedLongitude4);

        // Construct the values as a single line
        string valuesText = $"ID: {Id}, Start Latitude: {storedLatitude3}, Start Longitude: {storedLongitude3}, End Latitude: {storedLatitude4}, End Longitude: {storedLongitude4}";

        // Append the values as a new line in the text file
        await AppendToFileAsync(valuesText);
    }


    private async Task newLocation()
    {
        if (!string.IsNullOrWhiteSpace(userId))
        {
            // Read the values from the text file
            string filePath = "C:/Users/Chamindu/Source/Repos/Applicatio/MauiApp3/newData.txt";
            string[] lines = await File.ReadAllLinesAsync(filePath);

            foreach (var line in lines)
            {
                string[] values = line.Split(',');

                // Check if the ID matches the given user ID
                if (values.Length >= 5 && values[0].Trim() == $"ID: {userId}")
                {
                    if (double.TryParse(values[1].Substring(values[1].IndexOf(":") + 1).Trim(), out double parsedStartLatitude))
                        storedLatitude1 = parsedStartLatitude;

                    if (double.TryParse(values[2].Substring(values[2].IndexOf(":") + 1).Trim(), out double parsedStartLongitude))
                        storedLongitude1 = parsedStartLongitude;

                    if (double.TryParse(values[3].Substring(values[3].IndexOf(":") + 1).Trim(), out double parsedEndLatitude))
                        storedLatitude2 = parsedEndLatitude;

                    if (double.TryParse(values[4].Substring(values[4].IndexOf(":") + 1).Trim(), out double parsedEndLongitude))
                        storedLongitude2 = parsedEndLongitude;

                    break; // Found the matching ID, no need to continue iterating
                }
            }
        }
    }




}


